ex00 ft_strcpy.c

char	*ft_strcpy(char *dest, char *src)
{
	int i;

	i = 0;
	while (src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';
	return (dest);
}


ex01 ft_strncpy.c

char	*ft_strncpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	i = 0;
	while (src[i] != '\0' && i < n)
	{
		dest[i] = src[i];
		i++;
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}


ex02 ft_str_is_alpha(char *str)

int	ft_str_is_alpha(char *str)
{
	int		i;
	char	a;

	i = 0;
	while (str[i] != '\0')
	{
		a = str[i];
		if (!((a >= 'A' && a <= 'Z') || (a >= 'a' && a <= 'z')))
		{
			return (0);
		}
		i++;
	}
	return (1);
}

ex03 ft_str_is_numeric.c

int	ft_str_is_numeric(char *str)
{
	while (*str)
	{
		if (*str < '0' || *str > '9')
			return (0);
		str++;
	}
	return (1);
}

ex04  ft_str_is_lowercase.c

int	ft_str_is_lowercase(char *str)
{
	while (*str)
	{
		if (*str < 'a' || *str > 'z')
			return (0);
		str++;
	}
	return (1);
}

ex05  ft_str_is_uppercase.c

int	ft_str_is_uppercase(char *str)
{
	while (*str)
	{
		if (*str < 'A' || *str > 'Z')
			return (0);
		str++;
	}
	return (1);
}

ex06  ft_str_is_printable

int	ft_str_is_printable(char *str)
{
	while (*str)
	{
		if (*str < ' ' || *str == 127)
			return (0);
		str++;
	}
	return (1);
}


ex07  ft_strupcase

char	*ft_strupcase(char *str)
{
	int		i;
	char	a;

	i = 0;
	while (str[i] != '\0')
	{
		a = str[i];
		if (a >= 'a' && a <= 'z')
		{
			str[i] = a - 32;
		}
		i++;
	}
	return (str);
}

ex08  

char	*ft_strlowcase(char *str)
{
	int		i;
	char	a;

	i = 0;
	while (str[i] != '\0')
	{
		a = str[i];
		if (a >= 'A' && a <= 'Z')
		{
			str[i] = a + 32;
		}
		i++;
	}
	return (str);
}

ex09

char	*ft_strcapitalize(char *str)
{ 
	int		i;
	char	a;

	i = 1;
	if (str[0] >= 'a' && str[0] <= 'z')
		str[0] = str[0] - 32;
	while (str[i] != '\0')
	{
		a = str[i - 1];
		if (!((a >= 'a' && a <= 'z') || (a >= 'A' && a <= 'Z')))
		{
			if (str[i] >= 'a' && str[i] <= 'z')
				if (!(str[i - 1] >= '0' && str[i - 1] <= '9'))
					str[i] = str[i] - 32;
		}
		if (str[i] >= 'A' && str[i] <= 'Z')
			if (str[i - 1] >= '0' && str[i - 1] <= '9')
				str[i] = str[i] + 32;
		if ((a >= 'A' && a <= 'Z') && (str[i] >= 'A' && str[i] <= 'Z'))
			str[i] = str[i] + 32;
		if ((a >= 'a' && a <= 'z') && (str[i] >= 'A' && str[i] <= 'Z'))
			str[i] = str[i] + 32;
		i++;
	}
	return (str);
}




ex10

unsigned int	ft_strlcpy(char *dest, char *src, unsigned int size)
{
	unsigned int	cnt;
	unsigned int	idx;

	cnt = 0;
	idx = 0;
	while (src[cnt] != '\0')
		cnt++;
	if (size != 0)
	{
		while (src[idx] != '\0' && idx < (size - 1))
		{
			dest[idx] = src[idx];
			idx++;
		}
		dest[idx] = '\0';
	}
	return (cnt);
}



ex11

#include <unistd.h>

void	ft_putchar(char c)
{
	write(1, &c, 1);
}

void	ft_putstr_non_printable(char *str)
{
	int				i;

	i = 0;
	while (str[i] != '\0')
	{
		if (str[i] >= ' ' && str[i] != 127)
		{
			ft_putchar(str[i]);
		}
		else
		{
			ft_putchar('\\');
			ft_putchar("0123456789abcdef"[a / 16]);
			ft_putchar("0123456789abcdef"[a % 16]);
		}
		i++;
	}
}


ex12

