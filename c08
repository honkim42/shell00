ex00   ft.h


#ifndef FT_H
# define FT_H

void	ft_putchar(char c);
void	ft_swap(int *a, int *b);
void	ft_putstr(char *str);
int		ft_strlen(char *str);
int		ft_strcmp(char *s1, char *s2);

#endif





ex01  ft_boolean.h   

#ifndef FT_BOOLEAN_H
# define FT_BOOLEAN_H

# include <unistd.h>

typedef int	t_bool;

# define TRUE 1
# define FALSE 0
# define SUCCESS 0

# define EVEN(nbr) (nbr % 2 == 0)

# define EVEN_MSG "I have an even number of arguments.\n"
# define ODD_MSG "I have an odd number of arguments.\n"

#endif




ex02   ft_abs.h 

#ifndef FT_ABS_H
# define FT_ABS_H

# define ABS(Value) ((Value < 0) ? (Value * (-1)) : Value)

#endif



ex03   ft_point.h  


#ifndef FT_POINT_H
# define FT_POINT_H

typedef struct	s_point
{
	int	x;
	int	y;
}				t_point;

#endif

 
ex04   ft_strs_to_tab.c 

#include <stdlib.h>
#include "ft_stock_str.h"

int					ft_strlen(char *str)
{
	int	i;

	i = 0;
	while (*str)
	{
		str++;
		i++;
	}
	return (i);
}

char				*ft_strdup(char *str)
{
	int		i;
	char	*dest;

	i = 0;
	dest = (char *)malloc(sizeof(char) * ft_strlen(str) + 1);
	while (str[i])
	{
		dest[i] = str[i];
		i++;
	}
	dest[i] = 0;
	return (dest);
}

struct s_stock_str	*ft_strs_to_tab(int ac, char **av)
{
	t_stock_str	*arr;
	int			cnt;

	cnt = 0;
	if (!(arr = (t_stock_str *)malloc(sizeof(t_stock_str) * (ac + 1))))
		return (0);
	while (cnt < ac)
	{
		arr[cnt].str = av[cnt];
		arr[cnt].size = ft_strlen(av[cnt]);
		arr[cnt].copy = ft_strdup(av[cnt]);
		cnt++;
	}
	arr[cnt].str = 0;
	return (arr);
}

ex05  ft_show_tab.c      

#include <unistd.h>
#include "ft_stock_str.h"

void	put_str(char *str)
{
	while (*str != '\0')
	{
		write(1, str, 1);
		str++;
	}
	write(1, "\n", 1);
}

void	ft_putnbr(int nb)
{
	int size;
	int out;
	int tmp;

	tmp = nb;
	if (nb == 0)
	{
		write(1, "0", 1);
		return ;
	}
	size = 1;
	if (nb < 0)
		write(1, "-", 1);
	while ((nb = nb / 10) != 0)
		size = size * 10;
	while (size != 0)
	{
		out = tmp / size;
		if (out < 0)
			out = out * (-1);
		out = 48 + out;
		write(1, &out, 1);
		tmp = tmp % size;
		size = size / 10;
	}
}

void	ft_show_tab(struct s_stock_str *par)
{
	while (par->str != 0)
	{
		put_str(par->str);
		ft_putnbr(par->size);
		write(1, "\n", 1);
		put_str(par->copy);
		par++;
	}
}






#include <unistd.h>
#include "ft_stock_str.h"

void	ft_putchar(char c)
{
	write(1, &c, 1);
}

void	ft_puts(char *str)
{
	while (*str)
		ft_putchar(*str++);
	ft_putchar('\n');
}

void	ft_putnbr(int nb)
{
	unsigned int n;

	if (nb < 0)
	{
		ft_putchar('-');
		n = -nb;
	}
	else
		n = nb;
	if (n > 9)
	{
		ft_putnbr(n / 10);
		n %= 10;
	}
	ft_putchar(n + '0');
}

void	ft_show_tab(struct s_stock_str *par)
{
	if (!par)
		return ;
	while (par->str)
	{
		ft_puts(par->str);
		ft_putnbr(par->size);
		ft_putchar('\n');
		ft_puts(par->copy);
		par++;
	}
}
